import { choice, fixed, literal, multiple, type Grammar } from "../grammar";

export const grammar = {
  root: multiple("root", "form"),
  form: choice("form", ["literal", "list_", "vector", "map_", "reader_macro"]),
  forms: multiple("forms", "form"),
  list_: fixed("list_", ["forms"]),
  vector: fixed("vector", ["forms"]),
  map_: multiple("map_", "map_entry"),
  map_entry: fixed("map_entry", ["form", "form"]),
  set_: fixed("set_", ["forms"]),
  reader_macro: choice("reader_macro", [
    "lambda_",
    "meta_data",
    "regex",
    "var_quote",
    "host_expr",
    "set_",
    "tag",
    "discard",
    "dispatch",
    "deref",
    "quote",
    "backtick",
    "unquote",
    "unquote_splicing",
    "gensym",
  ]),
  quote: fixed("quote", ["form"]),
  backtick: fixed("backtick", ["form"]),
  unquote: fixed("unquote", ["form"]),
  unquote_splicing: fixed("unquote_splicing", ["form"]),
  tag: fixed("tag", ["form", "form"]),
  deref: fixed("deref", ["form"]),
  gensym: fixed("gensym", []),
  lambda_: multiple("lambda_", "form"),
  meta_data: choice("meta_data", ["meta_data_map", "form"]),
  meta_data_map: fixed("meta_data_map", ["map_", "form"]),
  var_quote: fixed("var_quote", ["symbol"]),
  host_expr: fixed("host_expr", ["form", "form"]),
  discard: fixed("discard", ["form"]),
  dispatch: fixed("dispatch", ["symbol", "form"]),
  regex: literal("regex", "string"),
  // there's more, but I'm tired lol
  literal: fixed("literal", []),
} as Grammar;
